// Generated by gencpp from file utils/debug.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_DEBUG_H
#define UTILS_MESSAGE_DEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct debug_
{
  typedef debug_<ContainerAllocator> Type;

  debug_()
    : operation_type(0)
    , id1(0)
    , id2(0)
    , id3(0)
    , data1(0.0)
    , data2(0.0)
    , data3(0.0)
    , data4(0.0)
    , data5(0.0)
    , data6(0.0)
    , data7(0.0)
    , data8(0.0)  {
    }
  debug_(const ContainerAllocator& _alloc)
    : operation_type(0)
    , id1(0)
    , id2(0)
    , id3(0)
    , data1(0.0)
    , data2(0.0)
    , data3(0.0)
    , data4(0.0)
    , data5(0.0)
    , data6(0.0)
    , data7(0.0)
    , data8(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _operation_type_type;
  _operation_type_type operation_type;

   typedef int32_t _id1_type;
  _id1_type id1;

   typedef int32_t _id2_type;
  _id2_type id2;

   typedef int32_t _id3_type;
  _id3_type id3;

   typedef double _data1_type;
  _data1_type data1;

   typedef double _data2_type;
  _data2_type data2;

   typedef double _data3_type;
  _data3_type data3;

   typedef double _data4_type;
  _data4_type data4;

   typedef double _data5_type;
  _data5_type data5;

   typedef double _data6_type;
  _data6_type data6;

   typedef double _data7_type;
  _data7_type data7;

   typedef double _data8_type;
  _data8_type data8;





  typedef boost::shared_ptr< ::utils::debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::debug_<ContainerAllocator> const> ConstPtr;

}; // struct debug_

typedef ::utils::debug_<std::allocator<void> > debug;

typedef boost::shared_ptr< ::utils::debug > debugPtr;
typedef boost::shared_ptr< ::utils::debug const> debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::debug_<ContainerAllocator1> & lhs, const ::utils::debug_<ContainerAllocator2> & rhs)
{
  return lhs.operation_type == rhs.operation_type &&
    lhs.id1 == rhs.id1 &&
    lhs.id2 == rhs.id2 &&
    lhs.id3 == rhs.id3 &&
    lhs.data1 == rhs.data1 &&
    lhs.data2 == rhs.data2 &&
    lhs.data3 == rhs.data3 &&
    lhs.data4 == rhs.data4 &&
    lhs.data5 == rhs.data5 &&
    lhs.data6 == rhs.data6 &&
    lhs.data7 == rhs.data7 &&
    lhs.data8 == rhs.data8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::debug_<ContainerAllocator1> & lhs, const ::utils::debug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::debug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cfc85dbf6535c56acc25a584f5c9d9d";
  }

  static const char* value(const ::utils::debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cfc85dbf6535c56ULL;
  static const uint64_t static_value2 = 0xacc25a584f5c9d9dULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/debug";
  }

  static const char* value(const ::utils::debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 operation_type \n"
"int32 id1            \n"
"int32 id2\n"
"int32 id3\n"
"float64 data1\n"
"float64 data2\n"
"float64 data3\n"
"float64 data4\n"
"float64 data5\n"
"float64 data6\n"
"float64 data7\n"
"float64 data8\n"
;
  }

  static const char* value(const ::utils::debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_type);
      stream.next(m.id1);
      stream.next(m.id2);
      stream.next(m.id3);
      stream.next(m.data1);
      stream.next(m.data2);
      stream.next(m.data3);
      stream.next(m.data4);
      stream.next(m.data5);
      stream.next(m.data6);
      stream.next(m.data7);
      stream.next(m.data8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::debug_<ContainerAllocator>& v)
  {
    s << indent << "operation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operation_type);
    s << indent << "id1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id1);
    s << indent << "id2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id2);
    s << indent << "id3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id3);
    s << indent << "data1: ";
    Printer<double>::stream(s, indent + "  ", v.data1);
    s << indent << "data2: ";
    Printer<double>::stream(s, indent + "  ", v.data2);
    s << indent << "data3: ";
    Printer<double>::stream(s, indent + "  ", v.data3);
    s << indent << "data4: ";
    Printer<double>::stream(s, indent + "  ", v.data4);
    s << indent << "data5: ";
    Printer<double>::stream(s, indent + "  ", v.data5);
    s << indent << "data6: ";
    Printer<double>::stream(s, indent + "  ", v.data6);
    s << indent << "data7: ";
    Printer<double>::stream(s, indent + "  ", v.data7);
    s << indent << "data8: ";
    Printer<double>::stream(s, indent + "  ", v.data8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_DEBUG_H
