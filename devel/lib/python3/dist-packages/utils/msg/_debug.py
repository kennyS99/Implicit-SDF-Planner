# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from utils/debug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class debug(genpy.Message):
  _md5sum = "0cfc85dbf6535c56acc25a584f5c9d9d"
  _type = "utils/debug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 operation_type 
int32 id1            
int32 id2
int32 id3
float64 data1
float64 data2
float64 data3
float64 data4
float64 data5
float64 data6
float64 data7
float64 data8
"""
  __slots__ = ['operation_type','id1','id2','id3','data1','data2','data3','data4','data5','data6','data7','data8']
  _slot_types = ['uint8','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       operation_type,id1,id2,id3,data1,data2,data3,data4,data5,data6,data7,data8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(debug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.operation_type is None:
        self.operation_type = 0
      if self.id1 is None:
        self.id1 = 0
      if self.id2 is None:
        self.id2 = 0
      if self.id3 is None:
        self.id3 = 0
      if self.data1 is None:
        self.data1 = 0.
      if self.data2 is None:
        self.data2 = 0.
      if self.data3 is None:
        self.data3 = 0.
      if self.data4 is None:
        self.data4 = 0.
      if self.data5 is None:
        self.data5 = 0.
      if self.data6 is None:
        self.data6 = 0.
      if self.data7 is None:
        self.data7 = 0.
      if self.data8 is None:
        self.data8 = 0.
    else:
      self.operation_type = 0
      self.id1 = 0
      self.id2 = 0
      self.id3 = 0
      self.data1 = 0.
      self.data2 = 0.
      self.data3 = 0.
      self.data4 = 0.
      self.data5 = 0.
      self.data6 = 0.
      self.data7 = 0.
      self.data8 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3i8d().pack(_x.operation_type, _x.id1, _x.id2, _x.id3, _x.data1, _x.data2, _x.data3, _x.data4, _x.data5, _x.data6, _x.data7, _x.data8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.operation_type, _x.id1, _x.id2, _x.id3, _x.data1, _x.data2, _x.data3, _x.data4, _x.data5, _x.data6, _x.data7, _x.data8,) = _get_struct_B3i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3i8d().pack(_x.operation_type, _x.id1, _x.id2, _x.id3, _x.data1, _x.data2, _x.data3, _x.data4, _x.data5, _x.data6, _x.data7, _x.data8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.operation_type, _x.id1, _x.id2, _x.id3, _x.data1, _x.data2, _x.data3, _x.data4, _x.data5, _x.data6, _x.data7, _x.data8,) = _get_struct_B3i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3i8d = None
def _get_struct_B3i8d():
    global _struct_B3i8d
    if _struct_B3i8d is None:
        _struct_B3i8d = struct.Struct("<B3i8d")
    return _struct_B3i8d
